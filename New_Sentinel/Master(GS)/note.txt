--------------------------------------------------------------------------------------------------------
2023年2月22日19点14分
移植陀螺仪时出现错误：error directive #error &quot;Define according the used Cortex core ARM_MATH_CMX

在宏定义中增加：

STM32F407xx,USE_HAL_DRIVER,USE_STDPERIPH_DRIVER,ARM_MATH_CM4,__CC_ARM,ARM_MATH_M

--------------------------------------------------------------------------------------------------------

记得开启FPU

--------------------------------------------------------------------------------------------------------

记得所有的代码要写在begin和end中间

--------------------------------------------------------------------------------------------------------

陀螺仪初始化一般放最后

--------------------------------------------------------------------------------------------------------

2023年2月24日
晚上把哨兵的底盘移植完，思考到底是用自己的电机驱动还是使用电机包底盘包，最后
不过无论如何都要将底盘封装成三个数值

四个电机 -> 三个数值

要结合实际的比赛环境优化代码，将车放到特定的场景里面做假设

--------------------------------------------------------------------------------------------------------

记得把驱动“driver”的中断回调函数放到it里面

--------------------------------------------------------------------------------------------------------

	uint32_t txMailBox;
	CAN_TxFrameTypeDef *txFrame;
	

	txFrame->header.StdId = SEND_L_HEAD_ID;
	txFrame->header.IDE = CAN_ID_STD;
	txFrame->header.RTR = CAN_RTR_DATA;
	txFrame->header.DLC = 8;
	
	// 先发高8位数据，再发低8位数据
//	memcpy(txFrame->data, &pack->Send_L_Head,sizeof(pack->Send_L_Head));
	
	txFrame->data[0] = 0;
	txFrame->data[1] = 0;
	txFrame->data[2] = 0;
	txFrame->data[3] = 0;
	txFrame->data[4] = 0;
	txFrame->data[5] = 0;	
	txFrame->data[6] = 0;
	txFrame->data[7] = 0;	
	
	data[0] = 0;
	data[1] = 0;
	data[2] = 0;
	data[3] = 0;
	data[4] = 0;
	data[5] = 0;	
	data[6] = 0;
	data[7] = 0;
	
	
	
//	txFrame->data[0] = (uint8_t)((int16_t)pack->Send_L_Head.target_yaw >> 8);
//	txFrame->data[1] = (uint8_t)((int16_t)pack->Send_L_Head.target_yaw);
//	txFrame->data[2] = (uint8_t)((int16_t)pack->Send_L_Head.target_pit >> 8);
//	txFrame->data[3] = (uint8_t)((int16_t)pack->Send_L_Head.target_pit);
//	txFrame->data[4] = (uint8_t)pack->Send_L_Head.mode;
//	txFrame->data[5] = 0;
//	txFrame->data[6] = 0;
//	txFrame->data[7] = 0;	


	HAL_CAN_AddTxMessage(&MH_DRV_CAN_USE, &txFrame->header, &txFrame->data[0], &txMailBox);
	
--------------------------------------------------------------------------------------------------------


串口3记得开DMA

--------------------------------------------------------------------------------------------------------

2023年4月24日

增加shoot_task的注释
换成全新的操作手册
解决bmi上电数据不稳定导致的大yaw轴抖动（延时）
底盘出现超自然现象：
能收到数据但是却无法控制，和深技大和我描述的有点相似，研究是否能够复现

希望明天能优化整体代码结构，多看看老队员的代码，学习

2023年4月25日
解决某些模式进入后要先波动波轮的问题
模拟比赛模式默认关闭发射机构
接收到射频之后红外灯闪烁

Problem：
底盘与大YAW轴在第一次上电的时候没力，指示灯显示底盘在线大YAW轴不在线
扫描范围，小范围抖动

裁判系统掉线处理
模拟比赛开始

2023年4月27日
彻底解决两个头的零点问题，将两个头的零点设置到了一个不可能到达的地方，
从而不会导致卡住

2023年5月2日
更改上下通讯链路想法：
左头can1 右头can2
上下使用串口
串口通讯数据：
云台底盘解算都在下主控
陀螺仪数据发给下面

下can1底盘+云台
下can2超电

发射机构思路：
可不可以说一直计算，但是当不为单发模式的时候，便一直等于0

GIMBAL更新：
增加了若9015掉线，即每隔一段时间给电机发送开启指令的代码

2023年5月3日
增加视觉离线射速清零

哈工深交流问题：
增加摇头模式
增加因为比赛开始而遥控器关闭，摩擦轮在转的问题
遥控器功能不全，增加
1.软件复位
2.自瞄测试
3.模拟比赛开始

大Yaw轴掉线处理
裁判系统掉线处理

增加友方前哨战存活底盘不转

增加陀螺仪初始化100次不过，软件复位

软件复位位置：
1.遥控器软件复位
2.陀螺仪初始化不过软件复位

2023年5月16日
增加HardFault_Handler中断复位

2023年7月5日
优化细节：
裁判系统读取方式
云台响应速度
射频自适应
云台手停止打蛋功能
枪管ID一定不能设置错误
高速连发状态下弹速保持稳定，不会上下飘



2023年7月6日 
完成超电移植
裁判系统接收内容更新
所有和裁判系统有关的部分都可以优化
准备开始写两个小电脑通讯内容